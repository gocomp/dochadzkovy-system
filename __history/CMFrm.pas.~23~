unit CMFrm;

interface

uses
{$IFNDEF UNICODE}
  SwSystem;
{$ENDIF}
Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, COMOBJ, OleCtnrs, Activex, Riss_Devices_TLB, Data.DB,
  Vcl.Grids, Vcl.DBGrids, RzDBGrid, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, frxClass, frxExportPDF, frxDBSet,
  FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, RzButton,
  frxGradient, frxOLE, frxRich, frxChart, RzCommon;

type
  TCMForm = class(TForm)
    btnOpen: TButton;
    gb2: TGroupBox;
    btnSysSettings: TButton;
    btnAlarmSettings: TButton;
    btnMessageSettings: TButton;
    btnEmp: TButton;
    btnSLog: TButton;
    btnGLog: TButton;
    btnAccessSet: TButton;
    Button3: TButton;
    VytlaËiù: TButton;
    dnastavenie: TDataSource;
    FDConnection1: TFDConnection;
    FDTransaction1: TFDTransaction;
    Nastavenie: TFDTable;
    Zamest: TFDTable;
    Dzamest: TDataSource;
    Dcas: TDataSource;
    caslog: TFDTable;
    DBGrid1: TDBGrid;
    caslogid: TFDAutoIncField;
    caslogSN: TIntegerField;
    casloguserid: TIntegerField;
    caslogadminid: TIntegerField;
    caslogdatumcas: TDateTimeField;
    caslogenroll: TIntegerField;
    caslogtext: TStringField;
    caslogdeviceid: TIntegerField;
    caslogverifymode: TIntegerField;
    caslogaction: TIntegerField;
    Dcislokarty: TDataSource;
    cislokarty: TFDTable;
    cislokartyID: TFDAutoIncField;
    cislokartycislokarty: TIntegerField;
    cislokartyused: TBooleanField;
    RzButton1: TRzButton;
    RzButton2: TRzButton;
    RzButton3: TRzButton;
    RzButton4: TRzButton;
    DBGrid2: TDBGrid;
    Nastavenieid: TFDAutoIncField;
    Nastavenieip1: TStringField;
    Nastavenieport1: TIntegerField;
    Nastaveniemiesto1: TStringField;
    Nastavenieip2: TStringField;
    Nastavenieport2: TIntegerField;
    Nastaveniemiesto2: TStringField;
    Nastavenieip3: TStringField;
    Nastavenieport3: TIntegerField;
    Nastaveniemiesto3: TStringField;
    Nastavenieico: TIntegerField;
    Nastaveniedic: TIntegerField;
    Nastavenieicdph: TStringField;
    Nastavenienazov: TStringField;
    Nastavenieadresa: TStringField;
    Nastaveniedev1: TIntegerField;
    Nastaveniedev2: TIntegerField;
    Nastaveniedev3: TIntegerField;
    Zamestid: TFDAutoIncField;
    ZamestPriezvisko: TStringField;
    ZamestMeno: TStringField;
    ZamestKarta: TIntegerField;
    Zamestzamcislo: TIntegerField;
    Zamestsadzbahod: TFloatField;
    Zamestpraccas: TFloatField;
    Zamestheslo: TStringField;
    Zamestprivileg: TStringField;
    Zamestenabled: TBooleanField;
    Zamestenabdate: TDateField;
    dbjottment: TDataSource;
    dbdovod: TDataSource;
    dovod: TFDTable;
    jottment: TFDTable;
    jottmentid: TFDAutoIncField;
    jottmentzamid: TIntegerField;
    jottmentprichod: TDateTimeField;
    jottmentodchod: TDateTimeField;
    jottmentplatene: TBooleanField;
    jottmentdovod: TStringField;
    jottmentcascelkom: TTimeField;
    dovodid: TFDAutoIncField;
    dovodkod: TIntegerField;
    dovodnazov: TStringField;
    dovodplatene: TBooleanField;
    RzRegIniFile1: TRzRegIniFile;
    procedure btnSysSettingsClick(Sender: TObject);
    procedure btnAlarmSettingsClick(Sender: TObject);
    procedure btnMessageSettingsClick(Sender: TObject);
    procedure olvas(id: integer);
    procedure btnSLogClick(Sender: TObject);
    procedure btnGLogClick(Sender: TObject);
    procedure btnEmpClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnOpenClick(Sender: TObject);
    procedure btnRealTimeClick(Sender: TObject);
    procedure btnAccessSetClick(Sender: TObject);
    procedure caslogtextGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure caslogdatumcasGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure RzButton2Click(Sender: TObject);
    procedure RzButton1Click(Sender: TObject);
    procedure RzButton3Click(Sender: TObject);
    procedure RzButton4Click(Sender: TObject);
    procedure opendev(id: integer);
    procedure closedev();
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    procedure SetDeviceInfo(ADevice: IDevice; DN: integer; IpAdress: string;
      port: integer);
    procedure SetButtonStatus(AOpen: Boolean);
    procedure AddRecord(AIRecord: IRecordExt);
  public
    { Public declarations }
  end;

var
  CMForm: TCMForm;
  gIDevice: IDevice;
  gDeviceConnection: TZd2911DeviceConnection;
  gDeviceTools: TZd2911Tools;

implementation

uses SystemFrm, AlarmFrm, MessageFrm, SLogFrm, GLogFrm, EnrollFrm,
  RealTimeFrm, AccessControlFrm, CommonUnt, cislokariet, ciszam, Nastavenie;

{$R *.dfm}

procedure TCMForm.AddRecord(AIRecord: IRecordExt);
// var
// lItem: TListItem;
begin
  caslog.Insert;
  caslogverifymode.Value := AIRecord.Verify;
  // mivel jott carta jelszo  GetGLogVerify(
  caslogaction.Value := AIRecord.Action; // jottment
  caslogdatumcas.Value := AIRecord.Clock;
  caslogdeviceid.Value := AIRecord.DN; // device id
  casloguserid.Value := strtoint(AIRecord.DIN); // user id

  caslog.Post;

  { lItem := lvRecord.Items.Add;
    lItem.Caption := IntToStr(lvRecord.Items.Count);
    lItem.SubItems.Add(IntToStr(AIRecord.DN));
    lItem.SubItems.Add(AIRecord.DIN);
    lItem.SubItems.Add(GetGLogVerify(AIRecord.Verify));
    lItem.SubItems.Add(IntToStr(AIRecord.Action));
    lItem.SubItems.Add(FormatDateTime('yyyy-mm-dd hh:nn:ss', AIRecord.Clock)); }

end;

procedure TCMForm.btnSysSettingsClick(Sender: TObject);
begin

  ShowSystemFrm;
end;

procedure TCMForm.caslogdatumcasGetText(Sender: TField; var Text: string;
  DisplayText: Boolean);
begin
  Text := Sender.AsString;
end;

procedure TCMForm.caslogtextGetText(Sender: TField; var Text: string;
  DisplayText: Boolean);
begin
  Text := Copy(Sender.AsString, 1, 1024);
end;

procedure TCMForm.btnAlarmSettingsClick(Sender: TObject);
begin
  ShowAlarmFrm;
end;

procedure TCMForm.btnMessageSettingsClick(Sender: TObject);
begin
  ShowMessageFrm;
end;

procedure TCMForm.btnSLogClick(Sender: TObject);
begin
  ShowSLogFrm;
end;

procedure TCMForm.btnGLogClick(Sender: TObject);
begin
  ShowGLogFrm;
end;

procedure TCMForm.btnEmpClick(Sender: TObject);
begin
  ShowEnrollFrm;
end;

procedure TCMForm.FormCreate(Sender: TObject);
begin
  inherited;

//  SetButtonStatus(False);

end;

procedure TCMForm.FormShow(Sender: TObject);
begin
RzRegIniFile1.WriteString('DB','dbfile','C:\github\dochadzkovy-system\dochlit');
RzRegIniFile1.UpdateIniFile;
end;

procedure TCMForm.RzButton1Click(Sender: TObject);
begin

  rfid.showmodal;
end;

procedure TCMForm.RzButton2Click(Sender: TObject);
begin
  close;
end;

procedure TCMForm.RzButton3Click(Sender: TObject);
begin
  ciszamest.showmodal;

end;

procedure TCMForm.RzButton4Click(Sender: TObject);
begin
  Nastavenie.Edit;
  nastav.showmodal;

end;

procedure TCMForm.opendev(id: integer);
var
  deviceStatus: PSafeArray;
  extraData: PSafeArray;
  extraProperty: PSafeArray;
  bRet: Boolean;
  allAtt: PSafeArray;
  i, recordnum: integer;
  records: array of IRecordExt;
  year, month, day: Word;
begin

  gIDevice := CoDevice.Create();
  gDeviceConnection := TZd2911DeviceConnection.Create(Self);
  gDeviceTools := TZd2911Tools.Create(Self);

  if id = 1 then
    SetDeviceInfo(gIDevice, 1, Nastavenieip1.Value, Nastavenieport1.Value);

  if id = 2 then
    SetDeviceInfo(gIDevice, 2, Nastavenieip2.Value, Nastavenieport2.Value);

  if id = 3 then
    SetDeviceInfo(gIDevice, 3, Nastavenieip3.Value, Nastavenieport3.Value);

  if gDeviceConnection.Open(gIDevice) <= 0 then
  begin
    ShowMessage('Chyba nepripojenÈ');
    Exit;
  end

end;

procedure TCMForm.closedev;
begin
  if Assigned(gDeviceConnection) then
    gDeviceConnection.close;
end;

procedure TCMForm.olvas(id: integer);
var
  deviceStatus: PSafeArray;
  extraData: PSafeArray;
  extraProperty: PSafeArray;
  bRet: Boolean;
  allAtt: PSafeArray;
  i, recordnum: integer;
  records: array of IRecordExt;
  year, month, day: Word;
begin

  // gIDevice := CoDevice.Create();
  // gDeviceConnection := TZd2911DeviceConnection.Create(Self);
  // gDeviceTools := TZd2911Tools.Create(Self);

  opendev(id);


  begin

    SetButtonStatus(True);

    begin
      extraProperty := CreateSafeArray(2);
      extraData := CreateSafeArray(6);
      deviceStatus := gDeviceTools.GetBytesByNum(IntToStr(DeviceBusy),
        NumberType_Int32Bit);

      // Setting device communication status to busy
      bRet := gDeviceConnection.SetPropertyExt_2(DeviceProperty_Enable,
        extraProperty, gIDevice, deviceStatus);
      if bRet then
      begin
        // Get new attendance logs
        // new attendance logs, the 1st parameter is 1: get new attendance logs, the 2nd parameter is°∞removing the new log mark°±
        // SetArrayValue(extraProperty,0,1);
        // if chkNewFlag.Checked then   torles a gepbol
        // SetArrayValue(extraProperty,1,1)
        // else
        SetArrayValue(extraProperty, 0, 0);

        // DecodeDate(strtodate('2017/01/02'),year,month,day);  //datum mikortol
        year := 2013;
        month := 1;
        day := 1;
        SetArrayValue(extraData, 0, year - 2000); // start year   2013 - 2000
        SetArrayValue(extraData, 1, month); // start month
        SetArrayValue(extraData, 2, day); // start day
        // DecodeDate(strtodate('2017/12/02'),year,month,day);      //datum mikorig
        year := 2077;
        month := 12;
        day := 31;
        SetArrayValue(extraData, 3, year - 2000); // end year   2099 - 2000
        SetArrayValue(extraData, 4, month); // end month
        SetArrayValue(extraData, 5, day); // end day

        SafeArrayUnaccessData(extraProperty);
        SafeArrayUnaccessData(extraData);

        bRet := gDeviceConnection.GetPropertyExt_2(DeviceProperty_AttRecords,
          extraProperty, gIDevice, extraData);
        if bRet then
        begin
          allAtt := gDeviceTools.GetGLogList(extraData);
          recordnum := allAtt.rgsabound[0].cElements;
          SetLength(records, recordnum);
          SafeArrayAccessData(allAtt, Pointer(records));
          // lvRecord.Items.Clear;
          for i := 0 to recordnum - 1 do
          begin
            AddRecord(records[i]);
          end;
          SafeArrayUnaccessData(allAtt);
        end
        else
        begin
          ShowMessage('Get GLog data: Fail');
        end;

        // Setting device communication status to idle
        deviceStatus := gDeviceTools.GetBytesByNum(IntToStr(DeviceIdle),
          NumberType_Int32Bit);
        bRet := gDeviceConnection.SetPropertyExt_2(DeviceProperty_Enable,
          extraProperty, gIDevice, deviceStatus);
        if not bRet then
        begin
          ShowMessage('Setting device communication status to idle: Fail');
        end;

      end
      else
      begin
        ShowMessage('Setting device communication status to busy: Fail.');
      end;
    end;
  end;

  closedev;
end;

procedure TCMForm.btnOpenClick(Sender: TObject);
begin
  olvas(1);
end;

procedure TCMForm.SetDeviceInfo(ADevice: IDevice; DN: integer; IpAdress: string;
  port: integer);
begin
  ADevice.DN := DN; // hanyadik bejarat 1,2,3
  ADevice.Password := '';
  ADevice.ConnectionModel := 5;
  ADevice.Model := 'ZDC2911';
  begin
    ADevice.CommunicationType := CommunicationType_Tcp;
    ADevice.IpAddress := IpAdress;
    ADevice.IpPort := port;
  end;

  // else begin
  // ADevice.CommunicationType := CommunicationType_P2P;
  // ADevice.SerialNumber := edtP2PAddr.Text;
  // gDeviceTools.SetP2pServerIpAddress(edtP2PServer.Text);
  // end;
end;

procedure TCMForm.SetButtonStatus(AOpen: Boolean);
begin
  btnSysSettings.Enabled := AOpen;
  btnAlarmSettings.Enabled := AOpen;
  btnMessageSettings.Enabled := AOpen;
  btnEmp.Enabled := AOpen;
  btnSLog.Enabled := AOpen;
  btnGLog.Enabled := AOpen;
  btnAccessSet.Enabled := AOpen;
end;

procedure TCMForm.btnRealTimeClick(Sender: TObject);
begin
  ShowRealTimeFrm;
end;

procedure TCMForm.btnAccessSetClick(Sender: TObject);
begin
  ShowAccessFrm;
end;

end.
